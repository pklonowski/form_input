// Render form parameters in panel style.

// Fetch parameters.

- chunked_params = @params || []
- params = chunked_params.flatten
- focus = @focus || @focus.nil?
- focused = @focused
- report = @report

// Choose parameter to focus on if enabled.

- focused ||= params.find{ |x| x.invalid? } || params.find{ |x| x.blank? } || params.first if focus

// Render each parameter, reporting errors as necessary.

- for p in chunked_params
  - if p.is_a?( Array )
    .row
      - for param in p
        div class="col-sm-#{param[ :cols ] || 12 / p.count}"
          == render_snippet :form_panel, params: [ param ], focus: focus, focused: focused, report: report
  - else
    - case p.type
    - when :ignore
    - when :hidden
      == render_snippet :form_hidden, params: [ p ]
    - when :select
      .form-group
        label
          = p.form_title
          - if subtitle = p[ :subtitle ]
            '
            small = subtitle
        select.form-control name=p.form_name multiple=p.array? autofocus=(p == focused) disabled=p.disabled? size=p[:size]
          - for value, name in p.data
            option selected=p.selected?( value ) value=p.format_value( value ) = name
        - if report and error = p.error
          .help-block
            span.text-danger = error
        - if help = p[ :help ]
          .help-block = help
    - when :textarea
      .form-group
        label
          = p.form_title
          - if subtitle = p[ :subtitle ]
            '
            small = subtitle
        textarea.form-control name=p.form_name autofocus=(p == focused) disabled=p.disabled? rows=p[:size] = p.form_value
        - if report and error = p.error
          .help-block
            span.text-danger = error
        - if help = p[ :help ]
          .help-block = help
    - else
      .form-group
        label
          = p.form_title
          - if subtitle = p[ :subtitle ]
            '
            small = subtitle

        - if p.array?
          - for value in p.form_value
            .form-group
              input.form-control type=p.type name=p.form_name value=value autofocus=(p.invalid? and p == focused) disabled=p.disabled? placeholder=p[:placeholder]
          - unless limit = p[ :max_count ] and p.form_value.count >= limit
            input.form-control type=p.type name=p.form_name autofocus=(p.valid? and p == focused) disabled=p.disabled? placeholder=p[:placeholder]

        - elsif p.hash?
          - for key, value in p.form_value
            .form-group
              input.form-control type=p.type name=p.form_name( key ) value=value autofocus=(p.invalid? and p == focused) disabled=p.disabled? placeholder=p[:placeholder]
          - unless limit = p[ :max_count ] and p.form_value.count >= limit
            input.form-control type=p.type name=p.form_name( p.form_value.count ) autofocus=(p.valid? and p == focused) disabled=p.disabled? placeholder=p[:placeholder]
          
        - else
          input.form-control type=p.type name=p.form_name value=p.form_value autofocus=(p == focused) disabled=p.disabled? placeholder=p[:placeholder]
        - if report and error = p.error
          .help-block
            span.text-danger = error
        - if help = p[ :help ]
          .help-block = help

// EOF //
